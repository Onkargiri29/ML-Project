# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/127dXM1nkbJ331-qTm1K3tCef899RJWe4
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv("/content/newcovid.csv")

df.head(5)

df.shape

df.isnull().sum()

df.info()

df.describe()

df.keys()

df.columns

df.nunique()

df.tail()

df=df.iloc[:36]
# we apply the iloc function and select all rows except the last row

df['active'].sum(axis = 0)
# The total number of active cases in India is 2,22,526

df['positive'].sum(axis = 0)
# The total number of positive cases in India are 10,466,595

df['cured'].sum(axis = 0)
# The total number of cured cases in India is 10,092,909

df['death'].sum(axis = 0)
# The total number of deaths in India are 1,51,160

df['new_active'].sum(axis = 0)
# The total number of new active cases are 2,16,558

df['new_positive'].sum(axis = 0)
# The total number of new positive cases are 10,479,179

df['new_cured'].sum(axis = 0)
# The total number of new cured cases are 10,111,294

df['new_death'].sum(axis = 0)
# The total number of new death cases are 1,51,327

# Data Visualization

sns.pairplot(data=df)
# plotting scatter plots of all data using pairplot

cases_df=df.sum()
# Storing total cases in cases_df

cases_df
# Subset of original dataset

cases_df.drop(['sno','state_name','state_code'],inplace=True)
# Dropping unnecessary columns

cases_df
# Name of case types and their total number

my_data = [222526,10466595,10092909,151160]
my_labels = 'Active','Positive','Cured','Death'
my_explode = (0,0,0,1.5)
my_colors = ['lightblue','lightsteelblue','lightpink','black']
fig1, ax1 = plt.subplots(figsize=(13, 8))
plt.pie(my_data, labels=my_labels, autopct='%1.1f%%', startangle=15, shadow = True, colors=my_colors, explode=my_explode)
plt.axis('equal')
plt.show()
# Pie chart visualization

my_data = [216558,10479179,10111294,151327]
my_labels = 'New Active','New Positive','New Cured','New Death'
my_explode = (0,0,0,1.5)
my_colors = ['lightblue','lightsteelblue','lightpink','black']
fig1, ax1 = plt.subplots(figsize=(13, 8))
plt.pie(my_data, labels=my_labels, autopct='%1.1f%%', startangle=15, shadow = True, colors=my_colors, explode=my_explode)
plt.axis('equal')
plt.show()
# Pie chart visualization

my_data = [222526,10466595,10092909,151160,216558,10479179,10111294,151327]
my_labels = 'Active','Positive','Cured','Death','New Active','New Positive','New Cured','New Death'
my_explode = (0,0,0,0,0,0,0,1.5)
my_colors = ['gray','navajowhite','blanchedalmond','grey','lightblue','papayawhip','moccasin','lightpink']
fig1, ax1 = plt.subplots(figsize=(13, 8))
plt.pie(my_data, labels=my_labels, autopct='%1.1f%%', startangle=15, shadow = True, colors=my_colors, explode=my_explode)
plt.axis('equal')
plt.show()
# Pie chart visualization

plt.rcParams['figure.figsize']=(13,8)
# giving figure size

df[['state_name','active']].groupby(["state_name"]).mean().sort_values(by='active').plot.bar(color='purple')
plt.show()
# We can also use the groupby function to sort values in an ascending order based on the x-axis, y-axis and its keys
# Below we get a clear picture of the states in an increasing order based on their active level of cases.
# Kerela has a higher active cases compared to other states

df[['state_name','death']].groupby(["state_name"]).mean().sort_values(by='death').plot.bar(color='purple')
plt.show()
# We can also use the groupby function to sort values in an ascending order based on the x-axis, y-axis and its keys
# Below we get a clear picture of the states in an increasing order based on their death cases.
# Maharashtra has a higher death cases compared to other states

plt.figure(figsize=(13, 8))
plt.xticks(rotation=90)
sns.barplot(x='state_name',y='active',color='teal',data=df);
# The visualization below shows us that high number of active cases are found in kerala followed by maharashtra

plt.figure(figsize=(13, 8))
plt.xticks(rotation=90)
sns.barplot(x='state_name',y='positive',color='teal',data=df);
# The below visualization shows us that high number of positive cases can be seen in Maharashtra followed by karnataka



plt.figure(figsize=(13, 8))
plt.xticks(rotation=90)
sns.barplot(x='state_name',y='cured',color='teal',data=df);
# The visualization below shows us that high number of people have cured in the state of Maharashtra followed by karnataka

plt.figure(figsize=(13, 8))
plt.xticks(rotation=90)
sns.barplot(x='state_name',y='death',color='teal',data=df);
# The below visualization shows us that high number of deaths taking place in the state of Maharashtra followed by Tamilnadu and karnataka

plt.figure(figsize=(13, 8))
plt.xticks(rotation=90)
sns.barplot(x='state_name',y='new_active',color='teal',data=df);
# The following visualization shows us the total number of new cases and kerela has the high number of new active cases

plt.figure(figsize=(13, 8))
plt.xticks(rotation=90)
sns.barplot(x='state_name',y='new_positive',color='teal',data=df);
# The following visualization shows us the total number of new positive cases and Maharashtra has the high number of new positive cases

plt.figure(figsize=(13, 8))
plt.xticks(rotation=90)
sns.barplot(x='state_name',y='new_cured',color='teal',data=df);
# The following visualization shows us the total number of new cured cases and Maharashtra has the high number of new cured cases

plt.figure(figsize=(13, 8))
plt.xticks(rotation=90)
sns.barplot(x='state_name',y='new_death',color='teal',data=df);
# Maharashtra has the highest new death rates in India followed by Karnataka

df.drop(['sno','state_code'],axis=1,inplace=True)
# we have dropped columns like sno and statecode

df=df.set_index('state_name')
# Setting index as statename

df.plot.barh(stacked=True,figsize=(13,8))
# Stacked bar plot

df1=df[['cured', 'death']]
df1.plot.barh(color={"cured": "purple", "death": "black"},figsize=(13,8))
# bar plot for cured and death

df2=df[['positive', 'death']]
df2.plot.barh(color={"positive": "aquamarine", "death": "orange"},figsize=(13,8))
# bar plot for positive cases and death rate

df3=df[['death', 'cured']]
df3.plot.barh(color={"death": "red", "cured": "grey"},figsize=(13,8))
# barplot for death cases and cured cases

df4=df[['active', 'death']]
df4.plot.barh(color={"active": "black", "death": "orange"},figsize=(13,8))
# bar plot for active and death cases